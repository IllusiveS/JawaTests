package com.example.restservicedemo.service;

import com.example.restservicedemo.domain.Book;
import com.example.restservicedemo.domain.Person;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by wysocki on 23.5.2016.
 */
public class CarManager {
	private Connection connection;

	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_PERSON =
			"CREATE TABLE Book(id bigint GENERATED BY DEFAULT AS IDENTITY, " +
					"name varchar(20), " +
					"author varchar(30)," +
					"yor integer)";

	private long id;
	private String name;
	private String author;
	private int yor;
	private PreparedStatement addBookStmt;
	private PreparedStatement deleteAllCarsStmt;
	private PreparedStatement getAllBooksStmt;
	private PreparedStatement getCarByIdStmt;

	private Statement statement;

	public PersonManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Book".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_PERSON);

			addBookStmt = connection
					.prepareStatement("INSERT INTO Book (id, name, author, yor) VALUES (?, ?, ?, ?)");
			deleteAllCarsStmt = connection
					.prepareStatement("DELETE FROM Book");
			getAllBooksStmt = connection
					.prepareStatement("SELECT id, name, author, yor FROM Book");
			getCarByIdStmt = connection
					.prepareStatement("SELECT id, name, author, yor FROM Book where id = ?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	public void clearBooks() {
		try {
			deleteAllCarsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addBook(Book book) {
		int count = 0;
		try {
			addBookStmt.setLong(1, book.getId());
			addBookStmt.setString(2, book.getName());
			addBookStmt.setString(3, book.getAuthor());
			addBookStmt.setInt(4, book.getYor());

			count = addBookStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Book> getAllBooks() {
		List<Book> books = new ArrayList<Book>();

		try {
			ResultSet rs = getAllBooksStmt.executeQuery();

			while (rs.next()) {
				Book book = new Book();
				book.setId(rs.getInt("id"));
				book.setName(rs.getString("name"));
				book.setAuthor(rs.getString("author"));
				book.setYor(rs.getInt("yor"));
				books.add(book);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return books;
	}

	public Book getBook(Long id) {
		Book book = new Book();
		try {
			getCarByIdStmt.setLong(1, id);
			ResultSet rs = getCarByIdStmt.executeQuery();

			while (rs.next()) {
				book.setId(rs.getInt("id"));
				book.setName(rs.getString("name"));
				book.setAuthor(rs.getString("author"));
				book.setYor(rs.getInt("yob"));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return book;
	}
}
