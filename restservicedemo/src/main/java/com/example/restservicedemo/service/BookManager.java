package com.example.restservicedemo.service;

import com.example.restservicedemo.domain.Book;
import com.example.restservicedemo.domain.Person;

import java.sql.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/**
 * Created by wysocki on 23.5.2016.
 */
public class BookManager {
	private Connection connection;

	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_BOOK =
			"CREATE TABLE Book(id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, name varchar(40), author varchar(40), yor integer, person_id bigint FOREIGN KEY REFERENCES Person(id))";

	private static final String CREATE_TABLE_PERSON =
			"CREATE TABLE Person(id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, name varchar(40), yob integer)";

	private PreparedStatement addBookStmt;
	private PreparedStatement deleteAllBooksStmt;
	private PreparedStatement deleteBookByIdStmt;
	private PreparedStatement returnBookStmt;
	private PreparedStatement getAllBooksStmt;
	private PreparedStatement getBookByIdStmt;
	private PreparedStatement sellBookStmt;
	private PreparedStatement getBooksOwnedByPerson;
	private PreparedStatement getBookByNameStmt;

	private PreparedStatement addPersonStmt;
	private PreparedStatement deleteAllPersonsStmt;
	private PreparedStatement deletePeronByIdStmt;
	private PreparedStatement getAllPersonsStmt;
	private PreparedStatement getPersonByNameStmt;
	private PreparedStatement getPersonByIdStmt;

	private Statement statement;

	public BookManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;

			rs = connection.getMetaData().getTables(null, null, null,
					null);
			tableExists = false;
			while (rs.next()) {
				if ("Person".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_PERSON);

			addPersonStmt = connection
					.prepareStatement("INSERT INTO Person (name, yob) VALUES (?, ?)");
			deleteAllPersonsStmt = connection
					.prepareStatement("DELETE FROM Person");
			deletePeronByIdStmt = connection
					.prepareStatement("DELETE FROM Person WHERE id=?");
			getPersonByNameStmt = connection
					.prepareStatement("SELECT id, name, yob FROM Person where name = ?");
			getAllPersonsStmt = connection
					.prepareStatement("SELECT id, name, yob FROM Person");
			getPersonByIdStmt = connection
					.prepareStatement("SELECT id, name, yob FROM Person where id = ?");

			while (rs.next()) {
				if ("Book".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_BOOK);

			addBookStmt = connection
					.prepareStatement("INSERT INTO Book (name, author, yor) VALUES (?, ?, ?)");
			deleteAllBooksStmt = connection
					.prepareStatement("DELETE FROM Book");
			deleteBookByIdStmt = connection
					.prepareStatement("DELETE FROM Book WHERE id=?");
			getAllBooksStmt = connection
					.prepareStatement("SELECT id, name, author, yor, person_id FROM Book");
			getBookByIdStmt = connection
					.prepareStatement("SELECT id, name, author, yor, person_id FROM Book where id = ?");
			getBookByNameStmt = connection
					.prepareStatement("SELECT id, name, author, yor, person_id FROM Book where name = ?");
			sellBookStmt = connection
					.prepareStatement("UPDATE Book SET person_id = ? WHERE id = ?");
			returnBookStmt = connection
					.prepareStatement("UPDATE Book SET person_id = NULL WHERE id = ?");
			getBooksOwnedByPerson = connection
					.prepareStatement("SELECT id, name, author, yor FROM Book WHERE person_id=?");
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	public void clearBooks() {
		try {
			deleteAllBooksStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addBook(Book book) {
		int count = 0;
		try {
			addBookStmt.setString(1, book.getName());
			addBookStmt.setString(2, book.getAuthor());
			addBookStmt.setInt(3, book.getYor());

			count = addBookStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int deleteBook(Book book) {
		int count = 0;
		try {
			deleteBookByIdStmt.setLong(1, book.getId());
			count = deleteBookByIdStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Book> getAllBooks() {
		List<Book> books = new ArrayList<Book>();

		try {
			ResultSet rs = getAllBooksStmt.executeQuery();

			while (rs.next()) {
				Book book = new Book();
				book.setId(rs.getInt("id"));
				book.setName(rs.getString("name"));
				book.setAuthor(rs.getString("author"));
				book.setYor(rs.getInt("yor"));
				book.setOwner(rs.getInt("owner"));
				books.add(book);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return books;
	}

	public Book getBook(Long id) {
		Book book = new Book();
		try {
			getBookByIdStmt.setLong(1, id);
			ResultSet rs = getBookByIdStmt.executeQuery();

			while (rs.next()) {
				book.setId(rs.getInt("id"));
				book.setName(rs.getString("name"));
				book.setAuthor(rs.getString("author"));
				book.setYor(rs.getInt("yor"));
				book.setOwner(rs.getInt("person_id"));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return book;
	}
	public int addPerson(Person person) {
		int count = 0;
		try {
			addPersonStmt.setString(1, person.getFirstName());
			addPersonStmt.setInt(2, person.getYob());

			count = addPersonStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int deletePerson(Person person) {
		int count = 0;
		try {
			deletePeronByIdStmt.setLong(1, person.getId());
			count = deletePeronByIdStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Person> getAllPersons() {
		List<Person> persons = new ArrayList<Person>();

		try {
			ResultSet rs = getAllPersonsStmt.executeQuery();

			while (rs.next()) {
				Person p = new Person();
				p.setId(rs.getInt("id"));
				p.setFirstName(rs.getString("name"));
				p.setYob(rs.getInt("yob"));
				persons.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return persons;
	}

	public Person getPerson(Long id) {
		Person p = new Person();
		try {
			getPersonByIdStmt.setLong(1, id);
			ResultSet rs = getPersonByIdStmt.executeQuery();

			while (rs.next()) {
				p.setId(rs.getInt("id"));
				p.setFirstName(rs.getString("name"));
				p.setYob(rs.getInt("yob"));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return p;
	}

	public int rentBook(Book book, Person person) {
		int count = 0;

		try {
			sellBookStmt.setLong(1, person.getId());
			sellBookStmt.setLong(2, book.getId());

			count = sellBookStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return count;
	}

	public List<Book> getBooksRentedByPerson(Person person) {
		List<Book> booksFound = new LinkedList<Book>();
		try {
			getBooksOwnedByPerson.setLong(1, person.getId());

			ResultSet rs = getBooksOwnedByPerson.executeQuery();

			while (rs.next()) {
				Book foundBook = new Book();
				foundBook.setId(rs.getLong(1));
				foundBook.setName(rs.getString(2));
				foundBook.setAuthor(rs.getString(3));
				foundBook.setYor(rs.getInt(4));
				foundBook.setOwner((int)person.getId());

				booksFound.add(foundBook);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return booksFound;
	}

	public int returnBook(Book book) {
		int count = 0;

		try {
			returnBookStmt.setLong(1, book.getId());

			count = returnBookStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return count;
	}

	public int clearPersons() {
		int result = 0;

		try {
			result = deleteAllPersonsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return result;
	}

	public Book getBookByName(String name) {
		Book book = null;

		try {
			getBookByNameStmt.setString(1, name);
			ResultSet result = getBookByNameStmt.executeQuery();
			if (result.next()) {
				book = new Book();
				book.setId(result.getLong(1));
				book.setName(result.getString(2));
				book.setAuthor(result.getString(3));
				book.setYor(result.getInt(4));
				book.setOwner(result.getInt(5));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return book;
	}

	public Person getPersonByName(String name) {
		Person foundPerson = null;

		try {
			getPersonByNameStmt.setString(1, name);
			ResultSet result = getPersonByNameStmt.executeQuery();
			if (result.next()) {
				foundPerson = new Person();
				foundPerson.setId(result.getLong(1));
				foundPerson.setFirstName(result.getString(2));
				foundPerson.setYob(result.getInt(3));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return foundPerson;
	}
}
